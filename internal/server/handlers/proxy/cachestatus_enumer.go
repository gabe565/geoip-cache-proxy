// Code generated by "enumer -type CacheStatus -trimprefix Cache -transform upper"; DO NOT EDIT.

package proxy

import (
	"fmt"
	"strings"
)

const _CacheStatusName = "MISSHITBYPASS"

var _CacheStatusIndex = [...]uint8{0, 4, 7, 13}

const _CacheStatusLowerName = "misshitbypass"

func (i CacheStatus) String() string {
	if i >= CacheStatus(len(_CacheStatusIndex)-1) {
		return fmt.Sprintf("CacheStatus(%d)", i)
	}
	return _CacheStatusName[_CacheStatusIndex[i]:_CacheStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CacheStatusNoOp() {
	var x [1]struct{}
	_ = x[CacheMiss-(0)]
	_ = x[CacheHit-(1)]
	_ = x[CacheBypass-(2)]
}

var _CacheStatusValues = []CacheStatus{CacheMiss, CacheHit, CacheBypass}

var _CacheStatusNameToValueMap = map[string]CacheStatus{
	_CacheStatusName[0:4]:       CacheMiss,
	_CacheStatusLowerName[0:4]:  CacheMiss,
	_CacheStatusName[4:7]:       CacheHit,
	_CacheStatusLowerName[4:7]:  CacheHit,
	_CacheStatusName[7:13]:      CacheBypass,
	_CacheStatusLowerName[7:13]: CacheBypass,
}

var _CacheStatusNames = []string{
	_CacheStatusName[0:4],
	_CacheStatusName[4:7],
	_CacheStatusName[7:13],
}

// CacheStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CacheStatusString(s string) (CacheStatus, error) {
	if val, ok := _CacheStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CacheStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CacheStatus values", s)
}

// CacheStatusValues returns all values of the enum
func CacheStatusValues() []CacheStatus {
	return _CacheStatusValues
}

// CacheStatusStrings returns a slice of all String values of the enum
func CacheStatusStrings() []string {
	strs := make([]string, len(_CacheStatusNames))
	copy(strs, _CacheStatusNames)
	return strs
}

// IsACacheStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CacheStatus) IsACacheStatus() bool {
	for _, v := range _CacheStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
